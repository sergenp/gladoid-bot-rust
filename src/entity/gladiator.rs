//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::{entity::prelude::*, DatabaseConnection, FromQueryResult, QueryTrait};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "gladiator")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub attack: i32,
    pub defence: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attack_types_gladiators::Entity")]
    AttackTypesGladiators,
}

impl Related<super::attack_types_gladiators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttackTypesGladiators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    /// Finds the attacks for the given gladiator id,
    /// by joining the m2m table between gladiator and attack_types
    /// useful for a varius of reasons
    pub async fn find_attacks(
        gladiator_id: i32,
        db: DatabaseConnection,
    ) -> Vec<super::attack_type::Model> {
        return super::attack_type::Entity::find()
            .inner_join(super::attack_types_gladiators::Entity)
            .filter(super::attack_types_gladiators::Column::GladiatorId.eq(gladiator_id))
            .all(&db)
            .await
            .unwrap();
    }
}
